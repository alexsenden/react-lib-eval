I am creating a set of React programming problems for students and I need your help making more. Instead of using normal React, I am using a custom type of React where every prop passed to a library component must include a $ before the value. Each programming problem has the following set of rules for the students:

"You are a frontend software developer using JavaScript and React. 

In your code, Use div elements with the style prop's `display: flex` and `flexDirection` parameters to control layout.
Only write .jsx code. Do not use css or tailwind css. Do not use in-line styles except for `display: flex` and `flexDirection` parameters on the div component.
Only use components from the library that I provide you and basic HTML components.
Use as few components as necessary, and pass as few props as necessary. That means no additional props for styling.
Assume any necessary provider wrappers are already present higher in the component hierarchy (i.e. ThemeProvider, ToastProvider, etc.). "

The following library components can be used by the students:
 - Accordion
 - Alert
 - Avatar
 - Badge
 - Button
 - Card
 - Checkbox
 - Input
 - Link
 - List
 - Modal
 - ProgressBar
 - RadioButton
 - Select
 - Spinner
 - Tabs
 - Text
 - TextArea
 - Toast
 - Toggle

Here are some examples of problems I have written. Please write your questions in the same style:

PROBLEM 1:
QUESTION: 
Create a UserProfileCard component that displays a user's profile information. The layout should be as follows:

A Card component serves as the main container.

Inside the card, at the top left, an Avatar component displays the user's profile picture from the url "https://picsum.photos/150". The avatar's alt text should say "Avatar".

Next to the avatar, a Badge component displays the userâ€™s status ("Online" or "Offline").

Below the avatar and badge, display the user's name (John Doe) and a short bio ("Frontend Developer passionate about React.").

A Button component labeled "Follow" should be placed at the bottom of the card. Clicking it should toggle between "Follow" and "Unfollow".

A Link titled "View Profile" located below the button allows navigation to the full user profile at the "/profile" route.

The users online status should be stored in a variable called "isOnline".
The following status of the user should be stored in a variable called "following".

ANSWER: 
<Card>
  <div style={{display: 'flex', flexDirection: 'column'}}>
    <div style={{display: 'flex', flexDirection: 'row'}}>
      <Avatar src=${'https://picsum.photos/150'} alt=${'Avatar'} />
      <Badge content=${isOnline ? "Online" : "Offline"} type=${'primary'}/>
    </div>
    <Text type=${'title'} content=${"John Doe"}/>
    <Text type=${'body'} content=${"Frontend Developer passionate about React."}/>
    <Button onClick=${() => setFollowing(!following)} type=${'primary'} text=${following ? "Unfollow" : "Follow"}/>
    <Link href=${"/profile"} text=${"View Profile"}/>
  </div>
</Card> 

PROBLEM 2:
QUESTION:
Create a SettingsPanel component that allows users to customize their preferences. The layout should be as follows:

A Checkbox at the top to enable or disable notifications.

Below it, a section labeled "Theme Selection" contains three RadioButton components allowing the user to choose between Light, Dark, and System themes.

Below the theme section is a section labelled "Preferred Language" with a Select dropdown allows the user to pick their preferred language from a list of English, Spanish, or French.

At the bottom is a final section labeled "Auto-Updates" with a Toggle switch that is used to enable or disable auto-updates. 

Each section should have a section title above it.

ANSWER:
<div style={{display: 'flex', flexDirection: 'column'}}>
  <Checkbox checked=${notifications} onChange=${() => setNotifications(!notifications)} label=${"Enable Notifications"}/>

  <Text type=${"title"} content=${"Theme Selection"} />
  <RadioButton checked=${theme === "light"} onChange=${() => setTheme("light")} label=${"Light"}
  <RadioButton checked=${theme === "dark"} onChange=${() => setTheme("dark")} label=${"Dark"}
  <RadioButton checked=${theme === "system"} onChange=${() => setTheme("system")} label=${"System"}

  <Text type=${"title"} content=${"Preferred Language"} />
  <Select value=${'English'} options=${[{"value": "English", "label": "English"}, {"value": "Spanish", "label": "Spanish"}, {"value": "French", "label": "French"}]} />

  <Text type=${"title"} content=${"Auto-Updates"} />
  <Toggle active=${autoUpdate} onChange=${() => setAutoUpdate(!autoUpdate)} />
</div>

PROBLEM 3:
QUESTION:
Create a MultiStepForm component that simulates a multi-step signup process. The layout should be as follows:

A ProgressBar at the top, indicating the completion percentage (e.g., 33%, 66%, 100%).

Below the progress bar, display an Input field where the user enters their email address.

To the right of the email input, display a toggle switch that indicates whether the user would like to opt-in to promotional emails.

Above the email input, display an Input field for the user's first name.

Below the input field, add a TextAreaInput for users to write a short bio or additional comments.

At the bottom, a Button labeled "Next" advances the form to the next step. The button should update the progress bar and change the form fields accordingly.

The variable storing the user's email should be called "email".
The variable storing the user's name should be called "firstName".
The variable storing whether the user has opted in to promotional emails should be called "emailOptIn".
The variable storing the user's bio should be called "bio"
The variable storing the current step in the form should be called "step"

ANSWER:
<div style={{display: 'flex', flexDirection: 'column'}}>
  <ProgressBar progress=${(step / 3)} totalSteps=${3} argCurrentStep=${step} />

  {step === 1 && (
    <Input value=${email} onChange=${(e) => setEmail(e.target.value)} label=${"Email"} />
  )}

  {step === 2 && (
    <div style={{display: 'flex', flexDirection: 'row'}}>
      <Input value=${firstName} onChange=${(e) => setFirstName(e.target.value)} label=${"First Name"} />
      <Toggle active=${emailOptIn} onChange=${() => setEmailOptIn(!emailOptIn)} />
    </div>
  )}

  {step === 3 && (
    <TextArea value=${bio} onChange={(e) => setBio(e.target.value)} />
  )}

  <Button onClick=${() => setStep((prev) => Math.min(prev + 1, 3))} type=${'primary'} text=${"Opt-In to Promotional Emails?"}/>
</div>

PROBLEM 4:
QUESTION:
Create an FAQAccordion component that displays frequently asked questions. The layout should be as follows:

An Accordion component which contains three FAQ items, where each question expands to reveal its answer when clicked.

The FAQ items are:

Question: "What programs are available at the University of Manitoba?"
Answer: "The University of Manitoba offers programs in Arts, Science, Engineering, Business, Medicine, and more."

Question: "What are the admission requirements at the University of Manitoba?"
Answer: "Requirements vary by program but usually include high school grades and English proficiency (IELTS/TOEFL for international students)."

Question: "How much is tuition at the University of Manitoba?"
Answer: "Domestic students pay lower fees, while international students typically pay $18,000-$26,000 per year."

At the bottom of the component, a Link labeled "View More FAQs" directs users to a full FAQ page at the route "/fullfaq".

ANSWER:
<div style={{display: 'flex', flexDirection: 'column'}}>
  <Accordion items=${[{"title": "What programs are available at the University of Manitoba?", "content": "The University of Manitoba offers programs in Arts, Science, Engineering, Business, Medicine, and more."}, {"title": "What are the admission requirements at the University of Manitoba?", "content": "Requirements vary by program but usually include high school grades and English proficiency (IELTS/TOEFL for international students)."}, {"title": "How much is tuition at the University of Manitoba?", "content": "Domestic students pay lower fees, while international students typically pay $18,000-$26,000 per year."}]} />
  <Link href=${"/fullfaq"} text=${"View More FAQs"}
</div>

PROBLEM 5:
QUESTION:
Create a NotificationSystem component that handles different types of user notifications. The layout should be as follows:

At the top, an Alert component displays an urgent warning message ("System Maintenance in 1 hour").

Below the alert, a Button labeled "Show Notification" triggers a Modal component titled "Notification" containing detailed information.

This detailed information should read "The system will be down from 1AM to 8AM for maintenance.".

The modal is controlled with the "showModal" variable.

The modal should include a Spinner while loading content before displaying the full message. 

The code for the modal should be at the bottom of the component hierarchy.

The content is loading if the "loading" variable is true.

An informational Toast notification should briefly appear at the bottom of the screen when a button to the right of the "Show Notification" button is clicked. This button should be labelled "Show Toast".

The toast should have the text "The system will resume regular operation at 8AM."

The toast should be controlled with a variable named "showToast".

ANSWER:
<div style={{display: 'flex', flexDirection: 'column'}}>
  <Alert type=${'warning'} content=${"System Maintenance in 1 hour"} />

  <div style={{display: 'flex', flexDirection: 'row'}}>
    <Button type=${'primary'} text=${"Show Notification"} onClick=${() => setShowModal(true)}
    <Button type=${'primary'} text=${"Show Toast"} onClick=${() => setShowToast(true)}
  </div>

  <Modal isOpen=${showModal} onClose=${() => setShowModal(false)} title=${"Notification"} content=${loading ? <Spinner /> : <Text type=${'body'} content=${"The system will be down from 1AM to 8AM for maintenance."} />} />

  {showToast && (
    <Toast message=${"The system will resume regular operation at 8AM."} type=${'info'} onClose=${() => setShowToast(false)} />
  )}
</div>

PROBLEM 6:
QUESTION:
Create a TaskManager component that helps users manage their tasks. The layout should be as follows:

A Tabs component at the top with two tabs: Pending and Completed. Clicking on a tab should filter the displayed tasks.

A List component that displays tasks based on the selected tab.

Each task should have a label (task name) and a badge status. The status can be pending (error) or completed (success).

The pending tasks should be: "Hand in homework" and "Play hockey".

The completed tasks should be: "Read book" and "Slack off".

The components to be displayed in the list are stored in variables pending1, pending2, completed1, and completed2 respectively.  

ANSWER:
<Tabs tabs=${[{"label": "Pending", "content": <List items=${[pending1, pending2]} />}, {"label": "Completed", "content": <List items=${[completed1, completed2]} />}]} />




Those are all of the problems and their answers so far.
I have shown you at least one example usage of each component that is allowed. Do not use any others.
Surround any object keys with "".
Keep individual components on one line. Only div and Card can be opened and closed on separate lines.

Please create 2 more questions and their corresponding solutions in this custom React format.